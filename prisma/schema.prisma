// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  wallets       Wallet[]
  favorites     Favorite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Post {
  id            Int       @id @default(autoincrement())
  title         String
  content       String
  summary       String
  authorId      String
  views         Int       @default(0)
  createdAt     DateTime  @default(now())
  minted        Boolean   @default(false) 
 
  author        User      @relation(fields: [authorId], references: [id])
  comments      Comment[]
  likes         Like[]
  transactions  Transaction[]
  favorites     Favorite[]
  
  // so we can order posts by creation date
  @@index([createdAt])
  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  authorId  String
  createdAt DateTime @default(now())
  
  post      Post     @relation(fields: [postId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  authorId  String
  createdAt DateTime @default(now())
  
  post      Post     @relation(fields: [postId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])

  @@unique([postId, authorId])
}

model Wallet {
  id            String  @id @default(cuid())
  userId        String
  walletAddress String  @unique
  network       String? // Optional: network name, e.g. "ethereum", "solane", "bsc"
  status        String? // Optional: status of the wallet, e.g. "active", "pending" "disabled"

  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade) // a user can have multiple wallets

  @@unique([userId, walletAddress])
}

model Transaction {
  id          String    @id @default(cuid())
  type        String    // Type of transaction, e.g., "mint", "transfer"
  status      String    // Status, e.g., "pending", "completed", "failed"
  amount      Float?    // Optional: amount transferred
  currency    String?   // Optional: currency of the transaction, e.g., "SOL", "ETH"
  senderId    String?   // ID of the sender's wallet
  receiverId  String?   // ID of the receiver's wallet
  postId      Int?      // Associated post ID, if applicable
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  post        Post?      @relation(fields: [postId], references: [id]) // a transaction can be associated with a post
  favorites   Favorite[] // one transaction (the "mint") can be associated with multiple favorites
}

model Favorite {
  id            Int      @id @default(autoincrement())
  userId        String
  postId        Int
  transactionId String
  createdAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id]) // a user can have multiple favorites
  post          Post     @relation(fields: [postId], references: [id]) // a post can have multiple favorites
  transaction   Transaction @relation(fields: [transactionId], references: [id]) // a transaction can be associated with multiple favorites

  @@unique([userId, postId, transactionId])
}